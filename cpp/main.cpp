#include <iostream>
#include <fstream>
using namespace std;

#include <unsupported/Eigen/NonLinearOptimization>
using namespace Eigen;

class Func2
{
public:
    explicit Func2(int Inputs, int Values, double *X, double *Y)
        : mInputs(Inputs),
          mValues(Values)
    {
        x = (double *)malloc(sizeof(double)*mValues);
        y = (double *)malloc(sizeof(double)*mValues);
        for(int i=0; i<mValues; i++) {
            x[i] = X[i];
            y[i] = Y[i];
        }

    }
    ~Func2(){
        free(x);
        free(y);
    }
public:
    int inputs() const { return mInputs; }
    int values() const { return mValues; }
private:
    int mInputs;    //系数个数
    int mValues;    //x,y数据对数
    double *x;
    double *y;

public:
    int operator()(const VectorXd &b, VectorXd &fvec)//求值函数
    {
        for (int i = 0; i < mValues; i++)
            fvec[i] = b[0] + (b[1] * x[i] + b[2]) / ((x[i] + b[3]) * x[i] + b[4])
                    + (b[5] * x[i] + b[6]) / ((x[i] + b[7]) * x[i] + b[8]) - y[i];
        return 0;
    }
    int df(const VectorXd &b, MatrixXd &fjac)//雅可比偏导函数
    {
        for (int i = 0; i < mValues; i++)
        {
            double b1_b2_1 =  b[1] * x[i] + b[2];
            double b3_b4_2 = (x[i] + b[3]) * x[i] + b[4];

            double b5_b6_1 =  b[5] * x[i] + b[6];
            double b7_b8_2 = (x[i] + b[7]) * x[i] + b[8];
            fjac(i, 0) = 1.0;
            fjac(i, 1) = x[i] / b3_b4_2;
            fjac(i, 2) = 1.0 / b3_b4_2;

            fjac(i, 3) = -b1_b2_1 * x[i] / (b3_b4_2 * b3_b4_2);
            fjac(i, 4) = -b1_b2_1 / (b3_b4_2 * b3_b4_2);

            fjac(i, 5) = x[i] / b7_b8_2;
            fjac(i, 6) = 1.0 / b7_b8_2;

            fjac(i, 7) = -b5_b6_1 * x[i] / (b7_b8_2 * b7_b8_2);
            fjac(i, 8) = -b5_b6_1 / (b7_b8_2 * b7_b8_2);

        }
        return 0;
    }
};

int main()
{
    double x[201] = { 0, 20, 20.8512, 21.7386, 22.6638, 23.6283, 24.6339, 25.6824, 26.7754, 27.9149, 29.103, 30.3416, 31.6329, 32.9792, 34.3827, 35.846, 37.3716, 38.9621, 40.6204, 42.3491, 44.1515, 46.0305, 47.9896, 50.032, 52.1613, 54.3813, 56.6957, 59.1086, 61.6243, 64.2469, 66.9813, 69.8319, 72.8039, 75.9024, 79.1328, 82.5006, 86.0118, 89.6724, 93.4888, 97.4677, 101.616, 105.941, 110.449, 115.15, 120.051, 125.16, 130.487, 136.04, 141.83, 147.866, 154.159, 160.72, 167.56, 174.691, 182.126, 189.878, 197.958, 206.384, 215.167, 224.325, 233.872, 243.825, 254.202, 265.021, 276.3, 288.059, 300.319, 313.1, 326.425, 340.318, 354.801, 369.902, 385.644, 402.057, 419.169, 437.008, 455.607, 474.997, 495.213, 516.289, 538.262, 561.17, 585.053, 609.952, 635.912, 662.976, 691.191, 720.608, 751.277, 783.251, 816.585, 851.339, 887.571, 925.346, 964.728, 1005.79, 1048.59, 1093.22, 1139.75, 1188.25, 1238.82, 1291.55, 1346.52, 1403.82, 1463.57, 1525.86, 1590.8, 1658.5, 1729.08, 1802.67, 1879.39, 1959.38, 2042.77, 2129.71, 2220.35, 2314.84, 2413.36, 2516.07, 2623.16, 2734.8, 2851.19, 2972.53, 3099.04, 3230.93, 3368.44, 3511.8, 3661.26, 3817.08, 3979.53, 4148.9, 4325.47, 4509.56, 4701.49, 4901.58, 5110.19, 5327.68, 5554.42, 5790.81, 6037.26, 6294.21, 6562.08, 6841.36, 7132.53, 7436.08, 7752.56, 8082.5, 8426.49, 8785.11, 9159, 9548.8, 9955.2, 10378.9, 10820.6, 11281.1, 11761.2, 12261.8, 12783.6, 13327.7, 13894.9, 14486.3, 15102.8, 15745.6, 16415.7, 17114.3, 17842.7, 18602.1, 19393.8, 20219.2, 21079.7, 21976.8, 22912.2, 23887.3, 24903.9, 25963.8, 27068.8, 28220.8, 29421.9, 30674.1, 31979.5, 33340.6, 34759.5, 36238.9, 37781.2, 39389.1, 41065.5, 42813.2, 44635.3, 46535, 48515.5, 50580.3, 52732.9, 54977.2, 57317, 59756.4, 62299.6, 64951, 67715.3, 70597.2, 73601.8, 76734.2, 80000 };
    double y[201] = { 0, 0.0821, 0.0876, 0.0943, 0.1023, 0.1117, 0.1225, 0.135, 0.1491, 0.165, 0.1826, 0.2021, 0.2235, 0.2468, 0.2719, 0.299, 0.3278, 0.3583, 0.3903, 0.4236, 0.4581, 0.4936, 0.53, 0.5669, 0.6041, 0.6414, 0.6785, 0.7152, 0.751, 0.7859, 0.8198, 0.8527, 0.8845, 0.9151, 0.944, 0.9709, 0.9962, 1.0208, 1.0457, 1.0698, 1.0918, 1.1111, 1.13, 1.1503, 1.1701, 1.1871, 1.2024, 1.2175, 1.2316, 1.2441, 1.2569, 1.2696, 1.2811, 1.2919, 1.3015, 1.3103, 1.3203, 1.3295, 1.3373, 1.3451, 1.3531, 1.3606, 1.3672, 1.3738, 1.3805, 1.3868, 1.3926, 1.3983, 1.4039, 1.4093, 1.4144, 1.4192, 1.424, 1.4289, 1.4338, 1.4382, 1.4427, 1.4474, 1.4516, 1.4557, 1.46, 1.4642, 1.4682, 1.4721, 1.4759, 1.4798, 1.4839, 1.4881, 1.4922, 1.4959, 1.4997, 1.5034, 1.507, 1.511, 1.5152, 1.5191, 1.523, 1.527, 1.5309, 1.5349, 1.5389, 1.5429, 1.5469, 1.5509, 1.5551, 1.5592, 1.5635, 1.5678, 1.5721, 1.5765, 1.581, 1.5855, 1.59, 1.5945, 1.5991, 1.6038, 1.6085, 1.6132, 1.6181, 1.6231, 1.6282, 1.6334, 1.6387, 1.6441, 1.6496, 1.655, 1.6605, 1.666, 1.6717, 1.6776, 1.6838, 1.6899, 1.696, 1.702, 1.7081, 1.7145, 1.721, 1.7277, 1.7345, 1.7414, 1.7483, 1.7552, 1.7623, 1.7694, 1.7766, 1.7838, 1.7911, 1.7984, 1.8058, 1.8133, 1.8209, 1.8285, 1.836, 1.8436, 1.8512, 1.8588, 1.8664, 1.874, 1.8816, 1.889, 1.8964, 1.9035, 1.9105, 1.9173, 1.9238, 1.9302, 1.9365, 1.9427, 1.9493, 1.9558, 1.962, 1.9681, 1.974, 1.9798, 1.9855, 1.9911, 1.9965, 2.0019, 2.0072, 2.0124, 2.0175, 2.0226, 2.0276, 2.0325, 2.0375, 2.0424, 2.0473, 2.0522, 2.057, 2.0619, 2.0668, 2.0718, 2.0767, 2.0818, 2.0868, 2.0919, 2.0971, 2.1024, 2.1077, 2.1132, 2.1187 };
    Func2 functor(9, 201, x, y);


    /*
    double x[33] = { 0, 10, 20, 30, 40, 50, 60, 70, 80, 100, 125, 150, 175, 200, 250, 300, 400, 500, 800, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 8000, 10000, 15000, 20000, 30000, 50000, 80000 };
    double y[33] = { 0, 0.015000, 0.037000, 0.079000, 0.140000, 0.240000, 0.397000, 0.560000, 0.730000, 0.950000, 1.109000, 1.200000, 1.259000, 1.298000, 1.343000, 1.375000, 1.416000, 1.441000, 1.487000, 1.509000, 1.547000, 1.583000, 1.608000, 1.630000, 1.671000, 1.704000, 1.777000, 1.816000, 1.885000, 1.930000, 1.992000, 2.051000, 2.107000};
    Func2 functor(9, 33, x, y);
    */

    LevenbergMarquardt<Func2> lm(functor);

    int n = 9;
    VectorXd a(n);
    a << 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0;
    lm.minimize(a);

    cout<<"squaredNorm: " << lm.fvec.squaredNorm() <<endl;

    ofstream OutFile("Test.txt");
    OutFile << "beta = [ ";
    for(int i=0; i<n; i++)
        OutFile <<a.data()[i]  <<", ";
    OutFile << "]";
    OutFile.close();

    cout<<"a: " << a <<endl;
    cout << "Over!\n";
    return 0;
}
